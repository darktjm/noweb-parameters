This project used to contain parm.nw, a set of filters to provide
parameterized chunks for noweb.  It was extracted from build.nw, which
I wrote and use for general literal programming support, and changed
to a filter rather than a notangle replacement (as well as removing
another feature, newline suppression).  I no longer wish to maintain
two separate versions, though, so I have changed build.nw to use
parm.nw for its parameterized chunk support, and moved parm.nw back
into my literate build project:

   https://bitbucket.org/darktjm/literate-build

parm.nw is still independent enough from build.nw that you can tangle
and weave it separately (although I recommend weaving as part of the
literate-build project, as it will be colorized and more compact). 
However, I will no longer duplicate the code here, or the bulk of its
documentation.  In brief, this allows you to create chunks like:

    <<macro (@arg1) (@arg2)>>=
    ...
    ... blah<<@arg1>>
    ... blah<<@arg2>>
    @

and use them like:

    <<macro [[val1]] [[val2]]>>

and have <<@arg1>> expand to val1 and <<@arg2>> expand to val2.
Specializations are also supported, as well as passing arguments down
to chunks referenced by the macro.

The filter names and usage instructions are in the final section, but
mostly repeated here:

Extract the following four chunks from the noweb file, and compile
them with your C++ compiler (it should work with C++-98 through C++-20
without issues):

* nt-parm.cpp: always use this as a filter when tangling.

* nw-parm-preidx.cpp: always use this as a filter when weaving, before
  indexing (or implicit indexing, such as -x, -index, etc.).  See
  below for command-line arguments.

* nw-parm-postidx.cpp: always use this as a filter when weaving, after
  indexing (or implicit indexing).  If no indexing is done at all, use
  both nw-parm-* filters with nothing in between.

* noroots-parm.cpp: use this in place of noroots.

For example, to extract the programs and prepare them for use:

    for x in nt-parm nw-parm-preidx nw-parm-postidx noroots-parm; do
      notangle -R${x}.cpp parm.nw >${x}.cpp
      c++ -o ${x}{,.cpp}
    done

For example, to use:

    notangle -filter ./nt-parm -R'myroot' mystuff.nw > out
    noweave -filter ./nw-parm-preidx -index \
            -filter ./nw-parm-postidx mystuff.nw > mystuff.tex

If you are weaving a file that is meant to be tangled together with
other files, those other files need to be on the nw-parm-preidx
command line.  Repeating the main input file is harmless.  For
example, if x.nw and y.nw are normally tangled together, but weaved
separately:

    notangle -filter ./nt-parm -R'myroot' x.nw y.nw > out
    noweave -filter "./nw-parm-preidx y.nw" -index \
            -filter ./nw-parm-postidx x.nw > x.tex
    noweave -filter "./nw-parm-preidx x.nw" -index \
            -filter ./nw-parm-postidx y.nw > y.tex
