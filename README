This code filters to extend noweb with parameterized chunks.  It is a
partial rewrite of the code in my build.nw
(https://bitbucket.org/darktjm/literate-build), changing the tangle
part to a filter instead of a tangling back end, and removing the
no-newline feature.  While build.nw is licensed under the Apache
License 2.0, this code is in the Public Domain.

Unlike my other literate code on this site, this noweb file is not
meant to be processed using build.nw.  In fact, it shares code chunk
names with build.nw, making it impossible to using the current
build.nw.  Maybe one day when I reimplement explicit import/export,
this limitation will go away.  Until then, there is no color syntax
highlighting of code chunks, and there are many mostly blank pages and
other weird gaps, and it's hard to tell where the boundaries are
between code and documentation.

All files in this project are derived from parm.nw, except for this
README.  The are provided for convenience only; the authoritative
source is the noweb file.

The official documentation is the noweb file; weave it and display it.

  noweave -delay -filter l2h -index -html parm.nw | htmltoc > parm.html
  # view parm.html
  noweave -delay -index parm.nw > parm.tex
  pdflatex parm; pdflatex parm; pdflatex parm
  # view parm.pdf

The introduction contains the syntax; here is a summary:

  * chunk names starting with @ are reserved for use as parm names:

     @parm1
     @parm2
     @this is a parameter with @-sign and spaces
  
  * chunk definitions enclose parameters in parentheses at the position
    where the parameter value should occur:

     <<Divide (@n) by (@d)>>=

  * chunk references use in-line code (i.e., code surrounded by double
    square brackets) to indicate the parameter values:
    
      <<Divide [[10]] by [[2]]>>

  * parameters are referenced the same way as ordinary chunks:

     <<Divide (@n) by (@d)>>=
     <<@n>>/<<@d>>
     @

  * parameter values come from the nearest parent; they do not need
    to be defined by the chunk itself:
    
    <<Divide (@n) by (@d)>>=
    <<Do division>>
    @
    
    <<Do division>>=
    <<@n>>/<<@d>>
    @

  * the in-line code used as parameter text may not contain chunk
    references, except for parameter references, which are expanded:
    
    <<Divide (@n) by (@d)>>=
    <<Do binary operation [[/]] on [[<<@n>>]] and [[<<@d>>]]>>
    @
    
    <<Do binary operation (@op) on (@x) and (@y)>>=
    <<@x>><<@op>><<@y>>
    @

  * literal program text may also match literal program text in
    chunk definitions; the one with the least (or latest) parameter
    substitutions is chosen:
    
    <<Divide (@n) by (@d)>>=
    <<@n>>/<<@d>>
    @
    
    <<Divide (@n) by [[0]]>>=
    error
    @
    
    <<Do it>>=
    <<Divide [[10]] by [[2]]>> -- 10/2
    <<Divide [[20]] by [[0]]>> -- error
    @

The filter names and usage instructions are in the final section, but
repeated here:

Extract the following four chunks from the noweb file, make them
executable (or always prefix them with the path to perl in filter
command lines), and use as described:

  nt-parm: always use this as a filter when tangling
  nw-parm-preidx: always use this as a filter before indexing when weaving
  nw-parm-postidx: always use this as a filter after indexing when weaving
  noroots-parm: use this in place of noroots

For example, to extract the programs and prepare them for use:

  for x in nt-parm nw-parm-preidx nt-parm-postidx noroots-parm; do
    notangle -R$x parm.nw >$x
    chmod +x $x
  done

For example, to use:

  notangle -filter ./nt-parm -R'myroot' mystuff.nw > out
  noweave -filter ./nw-parm-preidx -index \
          -filter ./nw-parm-postidx mystuff.nw > mystuff.tex

If you are weaving a file that is meant to be tangled together with
other files, those other files need to be on the nw-parm-idx command
line.  Repeating the main input file is harmless.  For example:

  noweave -filter "./nw-parm-preidx morestuff.nw" -index \
          -filter ./nw-parm-postidx mystuff.nw > mystuff.tex
